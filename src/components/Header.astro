---
import type { Props } from '@astrojs/starlight/props';
import Search from '@astrojs/starlight/components/Search.astro';
---

<!-- Removed <header> wrapper since Starlight provides it -->
<div class="header-container">
  <div class="site-title">
    <a href="/">
      <span class="logo-emoji">üåç</span>
      <img src="/leger-white.svg" alt="Leger" class="logo-text logo-white" />
      <img src="/leger-black.svg" alt="Leger" class="logo-text logo-black" />
    </a>
  </div>
  
  <div class="header-center">
    <Search {...Astro.props} />
  </div>
  
  <div class="header-actions">
    <theme-button class='my-auto'>
      <button
        class='theme-toggle rounded-full border-none cursor-pointer px-1 py-0 flex items-center bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors'
        aria-label='Toggle Theme'
      >
        <span class='theme-option auto hidden'>
          <span class='mx-1.5 my-1'>üåì</span>
        </span>
        <span class='theme-option light hidden'>
          <span class='mx-1.5 my-1'>‚òÄÔ∏è</span>
        </span>
        <span class='theme-option dark hidden'>
          <span class='mx-1.5 my-1'>üåô</span>
        </span>
      </button>
    </theme-button>
    <a href="https://app.leger.run" class="login-button">
      Login
    </a>
  </div>
</div>

<script>
  type Theme = 'auto' | 'dark' | 'light';
  type ThemeChangeEvent = CustomEvent<{ theme: Theme }>;

  const theme = (() => {
    const getTheme = (): Theme => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('starlight-theme')) {
        return localStorage.getItem('starlight-theme') as Theme;
      }
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }
      return 'light';
    };

    const setTheme = (newTheme: Theme) => {
      const root = document.documentElement;
      const isDark = 
        newTheme === 'dark' || 
        (newTheme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches);
      
      root.setAttribute('data-theme', isDark ? 'dark' : 'light');
      localStorage.setItem('starlight-theme', newTheme);
      
      window.dispatchEvent(new CustomEvent('theme-changed', {
        detail: { theme: newTheme }
      }) as ThemeChangeEvent);
    };

    return { getTheme, setTheme };
  })();

  class ThemeButton extends HTMLElement {
    constructor() {
      super();
      const button = this.querySelector('.theme-toggle');
      if (!button) return;

      button.addEventListener('click', () => {
        const currentTheme = theme.getTheme();
        let newTheme: Theme;
        if (currentTheme === 'auto') newTheme = 'light';
        else if (currentTheme === 'light') newTheme = 'dark';
        else newTheme = 'auto';

        theme.setTheme(newTheme);
        this.updateSelectedTheme(newTheme);
      });

      window.addEventListener('theme-changed', (event: Event) => {
        const themeEvent = event as ThemeChangeEvent;
        this.updateSelectedTheme(themeEvent.detail.theme);
      });

      this.updateSelectedTheme(theme.getTheme());
    }

    updateSelectedTheme(newTheme: Theme) {
      const button = this.querySelector('.theme-toggle') as HTMLButtonElement;
      if (!button) return;
      
      button.classList.remove('auto-theme', 'light-theme', 'dark-theme');
      button.classList.add(`${newTheme}-theme`);

      // Update visibility of theme options
      const options = this.querySelectorAll('.theme-option');
      options.forEach(option => {
        option.classList.add('hidden');
        option.classList.remove('flex');
      });
      const activeOption = this.querySelector(`.theme-option.${newTheme}`);
      if (activeOption) {
        activeOption.classList.remove('hidden');
        activeOption.classList.add('flex');
      }
    }
  }
  customElements.define('theme-button', ThemeButton);

  // Initialize theme and logo visibility on page load
  const initializeTheme = () => {
    const currentTheme = theme.getTheme();
    const root = document.documentElement;
    const isDark = 
      currentTheme === 'dark' || 
      (currentTheme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches);
    
    root.setAttribute('data-theme', isDark ? 'dark' : 'light');
  };

  // Run on initial load
  initializeTheme();
  
  // Listen for system theme changes when in auto mode
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (theme.getTheme() === 'auto') {
      initializeTheme();
    }
  });
</script>

<style>
  .header-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1.5rem;
    max-width: 100rem;
    margin: 0 auto;
    width: 100%;
    box-sizing: border-box;
  }

  .site-title {
    flex-shrink: 0;
  }

  .site-title a {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    height: 40px;
  }

  .logo-emoji {
    font-size: 1.5rem;
    line-height: 1;
  }

  .logo-text {
    height: 19px;
    width: 47px;
    display: block;
  }

  /* Hide logos by default */
  .logo-white,
  .logo-black {
    display: none;
  }

  /* Show appropriate logo based on theme */
  :global(html:not([data-theme="light"])) .logo-white,
  :global(html[data-theme="light"]) .logo-black {
    display: block;
  }

  .header-center {
    flex: 1;
    max-width: 30rem;
    margin: 0 2rem;
  }

  .header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-shrink: 0;
  }

  .login-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 1.25rem;
    background-color: var(--sl-color-accent);
    color: var(--sl-color-bg);
    text-decoration: none;
    font-weight: 600;
    border-radius: 9999px;
    transition: transform 0.2s ease;
  }

  .login-button:hover {
    transform: scale(1.05);
  }

  :global([data-theme="light"]) .login-button {
    background-color: var(--sl-color-black);
    color: var(--sl-color-white);
  }

  .theme-option {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-option.hidden {
    display: none !important;
  }

  .theme-option.flex {
    display: flex !important;
  }

  @media (max-width: 50rem) {
    .header-center {
      display: none;
    }

    .logo-emoji {
      font-size: 1.25rem;
    }

    .logo-text {
      height: 16px;
      width: 39px;
    }
  }
</style>
